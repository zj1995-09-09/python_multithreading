# encoding: utf-8
# @author: MrZhou
# @file: __并发编程之协程.py
# @time: 2023/3/2 20:28
# @desc:

# 对于单线程下，我们不可避免程序中出现io操作，但如果我们能在自己的程序中(即用户程序级别，而非操作系统级别)控制单线程下的多个任务
# 能在一个任务遇到io阻塞时就切换到另外一个任务去计算，这样就保证了该线程能够最大限度的处于就绪态，即随时都可以被
# CPU执行的状态，相当于我们在用户程序级别将自己的io操作最大限度地隐藏起来，从而迷惑操作系统，让其看到
# 该线程好像一直在计算，io比较少从而更多的将CPU的执行权限分配给我们的线程
#
# 协程的本质就是在单线程下，由用户自己控制一个任务遇到io阻塞了就切换另外一个任务去执行，以此来提升效率。
# 为了实现它我们需要找寻一种可以同时满足以下条件的解决方案
# 1、可以控制多个任务之间的切换，切换之前将任务的状态保存下来，以便重新运行时，可以基于暂停的位置继续执行
# 2、作为1的补充，可以检测io操作，在遇到io操作的情况下才发生切换。
#
# 协程：是单线程下的并发，又称微线程英文名coroutine
# 协程是一种用户态的轻量级线程，即协程是由用户程序自己控制调度的

# 1、需要强调 python线程是属于内核级别，即由操作系统控制调度，如单线程遇到IO或执行时间就会被迫交出CPU执行权限，切换其他线程运行
# 2、单线程内开启协程，一旦遇上io，就会从应用程序级别而非操作系统控制切换，以此来提升效率，非IO操作的切换与效率无关


# 对比操作系统控制线程的切换，用户在单线程内控制协程的切换
#
# 优点如下：
#
# 协程的切换开销更小，属于程序级别的切换，操作系统完全感知不到，因而更加轻量级
#
# 单线程内就可以实现并发的效果，最大限度地利用cpu
# 缺点如下：
#
# 协程的本质是单线程下，无法利用多核，可以是一个程序开启多个进程，每个进程内开启多个线程，每个线程内开启协程
#
# 协程指的是单个线程，因而一旦协程出现阻塞，将会阻塞整个线程
#
# 总结协程特点：
# 1、必须在只有一个单线程里实现并发
# 2、修改共享数据不需加锁
# 3、用户程序里自己保存多个控制流的上下文栈

